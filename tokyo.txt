GIT - Creado por la fundacion que hace linux

CLASE 1

$git init
Inicia en mi carpeta un repositorio
Es como la base de datos donde se van a a guardar los cambios de cualquier archivo

$git add <nombre del archivo> (staging)
Esto es para que el repositorio que cree anteriormente sepa que el archivo existe

$git commig -m "Version 1"
Esto envia los ultimos cambios del archivo a la base de datos del sistema de control de versiones


-- A esta altura tengo guardada mi primer version

-- Luego de realizar cambios puedo volver a agregar el archivo


$git add . ó <nombre del archivo>
Puedo usar punto para que agregue todo lo que cambio en el proyecto

$git commit -m "Cambios realizados a la v1"
Esto es para guardar los cambios en la "base de datos"

$git status
Esto sirve para ver el estatus de la base de datos en comparacion a los archivos que estoy trabajando

$git show
Muestra todos los cambios historicos hechos, incluyendo lineas de codigo, texto o cualquier archivo.
Cuando se realizaron los cambios y quien los hizo.

$git log <nombre del archivo>
Conocer la historia entera de un archivo

$git push
Enviar hacia otro repositorio remoto lo que estoy haciendo

$git pull
Traer todos los cambios de un repositorio remoto

------------------------------

CLASE 2

En git podremos editar texto plano. Lo que podemos modificar y guardar como version es texto plano.
Git permite guardar archivos binarios pero no es tan preciso

ls -la Muestra archivos listados + los ocultos
history Muestra todos los comandos que hice
!numreo de comando

$git rm --cached <nombre del archivo>
Revierto el git add

$git add . (Queadan los archivos en el limbo, staging)

-------------------------------------

CONFIGURAR GIT

$git config
Veo todas las configuraciones que tiene

$git config --list
Muestra la configuracion por defecto de git

$git config --list --show-origin
Muestra donde estan las configuraciones guardadas

$git config --global user.name "Diego Fagundez"
Voy a indiciar el usuario global de git

$git config --global user.email "correo@corre.com"

$git diff c1bc30c2de1e4c3d0ca9cd9cc274a9abade8ac1b 2df2593d2d37cbe834a5e1041a1ec2aab20cf511
Primero poner la mas vieja y la mas nueva (Es mejor)

------------------------------------------

$git rm --cached: Elimina los archivos del área de Staging y del próximo commit pero los mantiene en nuestro disco duro.

$git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).

$git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.

$git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.

$git reset HEAD: Este es el comando para sacar archivos del área de Staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.